
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.*;
import java.util.ArrayList;
import java.util.List;
import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\006\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\004\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\005\004\000\002\005\003\000\002\011" +
    "\013\000\002\010\007\000\002\010\005\000\002\013\007" +
    "\000\002\014\004\000\002\012\012\000\002\003\005\000" +
    "\002\020\004\000\002\020\003\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\022" +
    "\005\000\002\022\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\004\000\002\015\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\035\006\001\002\000\004\037\037\001" +
    "\002\000\004\002\036\001\002\000\012\041\011\042\013" +
    "\043\007\044\012\001\002\000\004\004\033\001\002\000" +
    "\014\036\uffea\041\uffea\042\uffea\043\uffea\044\uffea\001\002" +
    "\000\004\004\030\001\002\000\004\004\025\001\002\000" +
    "\004\004\017\001\002\000\014\036\016\041\011\042\013" +
    "\043\007\044\012\001\002\000\014\036\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\001\002\000\004\037\uffec\001\002" +
    "\000\004\046\020\001\002\000\006\005\uffe4\007\uffe4\001" +
    "\002\000\006\005\022\007\023\001\002\000\004\046\024" +
    "\001\002\000\014\036\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\001\002\000\006\005\uffe5\007\uffe5\001\002\000\004" +
    "\046\020\001\002\000\006\005\022\007\027\001\002\000" +
    "\014\036\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002" +
    "\000\004\046\020\001\002\000\006\005\022\007\032\001" +
    "\002\000\014\036\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\001\002\000\004\046\020\001\002\000\006\005\022\007" +
    "\035\001\002\000\014\036\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\001\002\000\004\002\000\001\002\000\012\031" +
    "\045\032\040\033\046\046\051\001\002\000\006\017\107" +
    "\045\105\001\002\000\016\022\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\040\ufffc\046\ufffc\001\002\000\004\007\157\001\002" +
    "\000\004\007\156\001\002\000\014\031\ufffe\032\ufffe\033" +
    "\ufffe\040\ufffe\046\ufffe\001\002\000\004\047\155\001\002" +
    "\000\006\017\107\045\105\001\002\000\016\022\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\040\ufffb\046\ufffb\001\002\000\016" +
    "\022\ufffa\031\ufffa\032\ufffa\033\ufffa\040\ufffa\046\ufffa\001" +
    "\002\000\004\006\055\001\002\000\014\031\045\032\040" +
    "\033\046\040\053\046\051\001\002\000\004\002\001\001" +
    "\002\000\014\031\uffff\032\uffff\033\uffff\040\uffff\046\uffff" +
    "\001\002\000\020\010\056\017\063\046\065\047\060\050" +
    "\064\051\061\052\062\001\002\000\004\017\103\001\002" +
    "\000\034\005\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\001\002\000\004\007\ufff7\001\002\000\034\005" +
    "\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\020\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\001" +
    "\002\000\004\007\ufff6\001\002\000\012\017\063\046\065" +
    "\050\064\051\061\001\002\000\034\005\uffd1\007\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\001\002\000\034\005" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\020\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\001" +
    "\002\000\034\005\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\020\uffd6\025\uffd6\026\uffd6\027" +
    "\075\030\074\001\002\000\004\007\ufff5\001\002\000\010" +
    "\007\ufff8\025\072\026\071\001\002\000\012\017\063\046" +
    "\065\050\064\051\061\001\002\000\012\017\063\046\065" +
    "\050\064\051\061\001\002\000\034\005\uffd8\007\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8" +
    "\025\uffd8\026\uffd8\027\075\030\074\001\002\000\012\017" +
    "\063\046\065\050\064\051\061\001\002\000\012\017\063" +
    "\046\065\050\064\051\061\001\002\000\034\005\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\020\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\001\002\000" +
    "\034\005\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\020\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\001\002\000\034\005\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\025\uffd7\026" +
    "\uffd7\027\075\030\074\001\002\000\010\020\102\025\072" +
    "\026\071\001\002\000\034\005\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\001\002\000\006\017\107\045" +
    "\105\001\002\000\004\005\135\001\002\000\004\017\115" +
    "\001\002\000\016\005\uffd9\021\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\046\uffd9\001\002\000\012\017\111\046\065\050\064" +
    "\051\061\001\002\000\022\011\127\012\130\013\126\014" +
    "\123\015\124\016\131\025\072\026\071\001\002\000\012" +
    "\017\063\046\065\050\064\051\061\001\002\000\006\023" +
    "\113\024\114\001\002\000\004\017\115\001\002\000\004" +
    "\017\115\001\002\000\012\017\063\046\065\050\064\051" +
    "\061\001\002\000\004\020\117\001\002\000\016\005\uffdc" +
    "\021\uffdc\031\uffdc\032\uffdc\033\uffdc\046\uffdc\001\002\000" +
    "\004\020\121\001\002\000\016\005\uffdb\021\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\046\uffdb\001\002\000\024\011\127\012" +
    "\130\013\126\014\123\015\124\016\131\020\102\025\072" +
    "\026\071\001\002\000\012\017\uffe2\046\uffe2\050\uffe2\051" +
    "\uffe2\001\002\000\012\017\uffdf\046\uffdf\050\uffdf\051\uffdf" +
    "\001\002\000\012\017\063\046\065\050\064\051\061\001" +
    "\002\000\012\017\uffe1\046\uffe1\050\uffe1\051\uffe1\001\002" +
    "\000\012\017\uffe3\046\uffe3\050\uffe3\051\uffe3\001\002\000" +
    "\012\017\uffde\046\uffde\050\uffde\051\uffde\001\002\000\012" +
    "\017\uffe0\046\uffe0\050\uffe0\051\uffe0\001\002\000\010\020" +
    "\133\025\072\026\071\001\002\000\024\005\uffdd\020\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\031\uffdd\032\uffdd\033\uffdd\046" +
    "\uffdd\001\002\000\016\005\uffda\021\uffda\031\uffda\032\uffda" +
    "\033\uffda\046\uffda\001\002\000\012\017\063\046\065\050" +
    "\064\051\061\001\002\000\010\005\137\025\072\026\071" +
    "\001\002\000\012\017\063\046\065\050\064\051\061\001" +
    "\002\000\010\020\141\025\072\026\071\001\002\000\004" +
    "\007\uffed\001\002\000\014\021\144\031\045\032\040\033" +
    "\046\046\051\001\002\000\016\022\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\040\ufff0\046\ufff0\001\002\000\012\031\045\032" +
    "\040\033\046\046\051\001\002\000\014\022\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\046\ufff3\001\002\000\014\022\147\031" +
    "\045\032\040\033\046\046\051\001\002\000\020\022\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\151\040\ufff1\046\ufff1\001" +
    "\002\000\014\022\ufff4\031\ufff4\032\ufff4\033\ufff4\046\ufff4" +
    "\001\002\000\004\021\152\001\002\000\012\031\045\032" +
    "\040\033\046\046\051\001\002\000\014\022\154\031\045" +
    "\032\040\033\046\046\051\001\002\000\016\022\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\040\ufff2\046\ufff2\001\002\000\004" +
    "\007\uffee\001\002\000\016\022\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\040\ufff9\046\ufff9\001\002\000\016\022\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\040\ufffd\046\ufffd\001\002\000\004\021" +
    "\161\001\002\000\012\031\045\032\040\033\046\046\051" +
    "\001\002\000\014\022\163\031\045\032\040\033\046\046" +
    "\051\001\002\000\016\022\uffef\031\uffef\032\uffef\033\uffef" +
    "\040\uffef\046\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\013\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\051\006\043\007\041\010\040\011" +
    "\046\013\047\014\042\001\001\000\006\015\157\017\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\141" +
    "\017\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\053\007\041\010\040\011\046" +
    "\013\047\014\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\066\023\067\024\065\025\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\100\024\065" +
    "\025\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\077\025\056\001\001\000\006\024\072\025\056\001" +
    "\001\000\002\001\001\000\004\025\076\001\001\000\004" +
    "\025\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\103\017\105\001\001\000\002\001\001\000\004\017" +
    "\133\001\001\000\002\001\001\000\012\017\111\023\107" +
    "\024\065\025\056\001\001\000\004\016\124\001\001\000" +
    "\010\023\121\024\065\025\056\001\001\000\002\001\001" +
    "\000\004\017\117\001\001\000\004\017\115\001\001\000" +
    "\010\023\107\024\065\025\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\131\024\065\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\135\024\065\025\056\001\001\000\002\001\001" +
    "\000\010\023\137\024\065\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\142\007\041\010\040" +
    "\011\046\013\047\014\042\001\001\000\002\001\001\000" +
    "\020\005\145\006\144\007\041\010\040\011\046\013\047" +
    "\014\042\001\001\000\002\001\001\000\016\006\147\007" +
    "\041\010\040\011\046\013\047\014\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\152\006\144\007\041\010\040\011\046\013\047\014\042" +
    "\001\001\000\016\006\147\007\041\010\040\011\046\013" +
    "\047\014\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\161\006\144\007\041\010\040\011\046\013\047" +
    "\014\042\001\001\000\016\006\147\007\041\010\040\011" +
    "\046\013\047\014\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	try {
		file = new File("../ts.txt");
		bw = new BufferedWriter(new FileWriter(file));
		bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
		bw.newLine();
		bw.flush();
		simbolos_tabla = new HashMap<>();
	} catch (IOException e) {
		e.printStackTrace();
	}

    }


	public List<NodoSentencia> a;
	public BufferedWriter bw;
	public File file;
	public HashMap<String, String> simbolos_tabla;
	public ArrayList<String> elements = new ArrayList();
	public String resultado="";
	public String s = "";
    public String Error = "";
	public String lastType;

	/**Metodo al que se llama automaticamente ante algun error sintactico.*/
	public void syntax_error(Symbol s) {
            System.out.println("\nError en la linea " + (s.right+1) + " columna " + s.left + ". "
                + s + " no reconocido. valor " + s.value );
            Error = "Error en la linea " + (s.right+1) + " columna " + s.left + ". "
                    + s + " no reconocido. valor " + s.value ;

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



	public void writeTable(String id, String type) throws IOException{
		if (!simbolos_tabla.containsKey(id)) {
			bw.write(id+",ID,"+type+",,");
			bw.newLine();
			bw.flush();
			simbolos_tabla.put(id,type);
		} else {
			throw new IOException("[!ERROR] ID: ["+id+"] se encuentra definido como "+simbolos_tabla.get(id) + ", NO es posible definirlo como " + type);
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= DECLARE_SC PROGRAM_SECTION LISTA_SENTENCIAS ENDPROGRAM_SECTION 
            {
              NodoPrograma RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ls = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new NodoPrograma(ls);
    s += String.format("\nPrograma - Regla 0");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              List<NodoSentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ls = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia ss = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ls.add(ss);
                            RESULT = ls;
                            s += String.format("\nSentencias - Regla 1");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia ss = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            a = new ArrayList<NodoSentencia>();
                            a.add(ss);
                            RESULT = a;
                            s += String.format("\nSentencias - Regla 2");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_ASSIGN PUNTO_Y_COMA 
            {
              NodoSentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAsignacion sa = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = sa; s += String.format("\nSentencia asignacion - Regla 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_IF 
            {
              NodoSentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf sa = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sa; s += String.format("\nSentencia if - Regla 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_IF_ELSE 
            {
              NodoSentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIfElse sa = (NodoIfElse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sa; s += String.format("\nSentencia if/else - Regla 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              NodoSentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoWhile sa = (NodoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sa; s += String.format("\nSentencia while - Regla 5"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA_DISPLAY PUNTO_Y_COMA 
            {
              NodoSentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (NodoSentencia) sa; s += String.format("\nSentencia DISPLAY - Regla 6"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_ASSIGN ::= ID ASIGNACION EXPRESION 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String type = simbolos_tabla.get(id);
							if (type == null) throw new RuntimeException("ERROR - Simbolo " + id + " no definido");
							if ((type.equals("String")) || (type.equals("Bool"))) {
								throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un Float");
							}
							s += String.format("\nsentencia id asigna expresion - Regla 8");
							RESULT= new NodoAsignacion(new NodoIdentificador((String) id, type), e);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_STRING 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String type = simbolos_tabla.get(id);
							if (type == null) throw new RuntimeException("ERROR - Simbolo " + id + " no definido");
							if (!type.equals("String")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un STRING");
							s += String.format("\nsentencia id asigna constante string - Regla 9");
							RESULT = new NodoAsignacion(new NodoIdentificador((String) id, type), new NodoConstante("CTE_STR", (String) e));
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_BOOL 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String type = simbolos_tabla.get(id);
							if (type == null) throw new RuntimeException("ERROR - Simbolo " + id + " no definido");
							if (!type.equals("Bool")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un BOOL");
							s += String.format("\nsentencia id asigna const bool - Regla 10");
							RESULT = new NodoAsignacion(new NodoIdentificador((String) id, type), new NodoConstante("CTE_BOOL",(String) e));
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_ASSIGN ::= ID ASIGNACION IF_UNARIO 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
							s += String.format("\nsentencia id asigna IF unario  - Regla 11");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_SENTENCIAS ::= BLOQUE_SENTENCIAS SENTENCIA 
            {
              NodoBloqueSentencias RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBloqueSentencias ls = (NodoBloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia ss = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ls.add(ss);
                            RESULT = ls;
                            s += String.format("\nBloque Sentencias - Regla 12");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_SENTENCIAS ::= SENTENCIA 
            {
              NodoBloqueSentencias RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia ss = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            NodoBloqueSentencias b = new NodoBloqueSentencias();
                            b.add(ss);
                            RESULT = b;
                            s += String.format("\nBloque Sentencias - Regla 200");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_IF_ELSE ::= IF CONDICION LLAVES_ABRE BLOQUE_SENTENCIAS LLAVES_CIERRA ELSE LLAVES_ABRE BLOQUE_SENTENCIAS LLAVES_CIERRA 
            {
              NodoIfElse RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBloqueSentencias a = (NodoBloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBloqueSentencias b = (NodoBloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							s += String.format("\nif (lista de sentencias) - Regla 12"); 
							RESULT = new NodoIfElse(c, a, b);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_IF ::= IF CONDICION LLAVES_ABRE BLOQUE_SENTENCIAS LLAVES_CIERRA 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBloqueSentencias a = (NodoBloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						s += String.format("\nif (lista de sentencias) - Regla 12"); 
						RESULT = new NodoIf(c, a);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_IF ::= IF CONDICION SENTENCIA 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia a = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						s += String.format("\nif (sentencia simple)- Regla 13"); 
						RESULT = new NodoIf(c, a);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_WHILE ::= WHILE CONDICION LLAVES_ABRE BLOQUE_SENTENCIAS LLAVES_CIERRA 
            {
              NodoWhile RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoCondicion c = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBloqueSentencias ls = (NodoBloqueSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 s += String.format("\nwhile - Regla 43"); RESULT = new NodoWhile(c, ls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_DISPLAY ::= DISPLAY_FUNCTION CONST_STRING 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDisplay((String) cs); s += String.format("\nDISPLAY_FUNCTION - Regla 44"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DISPLAY",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF_UNARIO ::= SIGNO_PREGUNTA PARENTESIS_ABRE CONDICION COMA EXPRESION COMA EXPRESION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		s += String.format("\nIF unario - Regla 45"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_UNARIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARE_SC ::= DECLARE_SECTION LISTA_DECLARE ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		s += String.format("\ndecvar Regla 46"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_DECLARE ::= LISTA_DECLARE DECLARACION 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		s += String.format("\nLista Declare - Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_DECLARE ::= DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		s += String.format("\nDeclaracion simple - Regla 15"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TYPE_STRING DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "String"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); s += String.format("\nDeclaracion "+lastType+" - Regla 16");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= TYPE_INTEGER DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Integer"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); s += String.format("\nDeclaracion "+lastType+" - Regla 17"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TYPE_FLOAT DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Float"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); s += String.format("\nDeclaracion "+lastType+" - Regla 18"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TYPE_BOOL DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Bool"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); s += String.format("\nDeclaracion "+lastType+" - Regla 19"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_IDS ::= LISTA_IDS COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elements.add((String)id); s += String.format("\nLista ID Declaracion - Regla 20"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_IDS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elements.add((String)id); s += String.format("\nID Simple Declaracion - Regla 21"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADOR_RELACIONAL ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "=="; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADOR_RELACIONAL ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "<"; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADOR_RELACIONAL ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ">"; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADOR_RELACIONAL ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "<="; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADOR_RELACIONAL ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ">="; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR_RELACIONAL ::= DISTINTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!="; s += String.format("\nFactor ID - Regla XX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMPARACION ::= PARENTESIS_ABRE EXPRESION OPERADOR_RELACIONAL EXPRESION PARENTESIS_CIERRA 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoComparacion((String) op, a, b);
					s += String.format("\nComparacion -  Regla 333"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= PARENTESIS_ABRE COMPARACION OR COMPARACION PARENTESIS_CIERRA 
            {
              NodoCondicion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoComparacion ca = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoComparacion cb = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoCondicionDoble("OR", ca, cb);
					s += String.format("\nCondicion AND Condicion -  Regla 22"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= PARENTESIS_ABRE COMPARACION AND COMPARACION PARENTESIS_CIERRA 
            {
              NodoCondicion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoComparacion ca = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoComparacion cb = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new NodoCondicionDoble("AND", ca, cb);
					s += String.format("\nCondicion OR Condicion -  Regla 23"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= NOT COMPARACION 
            {
              NodoCondicion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoComparacion ca = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoCondicionSimple("NOT", ca);
					s += String.format("\nNOT Condicion -  Regla 24"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= COMPARACION 
            {
              NodoCondicion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoComparacion ca = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new NodoCondicionSimple(null, ca);
					s += String.format("\nCondicion - Regla 25"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION SUMA TERMINO 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoSuma(a, b); s += String.format("\nE+T - Regla 33"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION RESTA TERMINO 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoResta(a, b); s += String.format("\nE-T - Regla 34");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= TERMINO 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; s += String.format("\nTermino Regla 35");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERMINO ::= TERMINO MULTIPLICAION FACTOR 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoMultiplicacion(a, b); s += String.format("\nT*F - Regla 36");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TERMINO ::= TERMINO DIVISION FACTOR 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDivision(a, b); s += String.format("\nT/F - Regla 37");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TERMINO ::= FACTOR 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; s += String.format("\nFactor - Regla 38");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String type = simbolos_tabla.get(id); RESULT = new NodoIdentificador((String) id, type); s += String.format("\nFactor ID - Regla 39");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= CONST_INTEGER 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoConstante("CTE_INT", (String) e); s += String.format("\nFactor CONST_INT - Regla 40");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= CONST_FLOAT 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoConstante("CTE_FLOAT", (String) e); s += String.format("\nFactor CONST_FLOAT - Regla 41");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= PARENTESIS_ABRE EXPRESION PARENTESIS_CIERRA 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; s += String.format("\nFactor Regla 42");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
