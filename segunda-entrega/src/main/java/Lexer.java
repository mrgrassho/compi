/* The following code was generated by JFlex 1.7.0 */


import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/mr.grassho/Documents/UNLu/11809-COMPI/TP01/segunda-entrega/src/main/flex/Lexico1.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\26\1\3\1\2\1\0\1\3\1\1\16\26\4\0\1\3\1\33"+
    "\1\7\1\0\1\24\1\0\1\42\1\0\1\36\1\37\1\6\1\44"+
    "\1\32\1\4\1\13\1\5\1\12\11\11\1\27\1\31\1\35\1\30"+
    "\1\34\1\45\1\0\1\53\1\63\1\67\1\46\1\66\1\61\1\60"+
    "\1\65\1\47\2\25\1\52\1\70\1\57\1\62\1\51\1\25\1\56"+
    "\1\50\1\55\2\25\1\64\1\25\1\54\1\25\4\0\1\24\1\0"+
    "\1\21\3\25\1\17\1\20\5\25\1\22\5\25\1\15\1\23\1\14"+
    "\1\16\5\25\1\40\1\43\1\41\1\0\41\26\1\0\1\10\4\24"+
    "\4\0\1\24\2\0\1\26\7\0\1\24\4\0\1\24\5\0\21\24"+
    "\1\25\5\24\1\0\11\24\1\25\7\24\1\25\3\24\1\25\3\24"+
    "\1\25\1\24\1\25\3\24\1\0\2\24\1\25\u01c7\24\4\0\14\24"+
    "\16\0\5\24\7\0\1\24\1\0\1\24\21\0\160\26\5\24\1\0"+
    "\2\24\2\0\4\24\1\0\1\24\6\0\1\24\1\0\3\24\1\0"+
    "\1\24\1\0\24\24\1\0\123\24\1\0\213\24\1\0\5\26\2\0"+
    "\246\24\1\0\46\24\2\0\1\24\6\0\51\24\6\0\1\24\1\0"+
    "\55\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0"+
    "\33\24\4\0\4\24\15\0\6\26\5\0\1\24\4\0\13\26\1\0"+
    "\1\26\3\0\53\24\37\26\4\0\2\24\1\26\143\24\1\0\1\24"+
    "\10\26\1\0\6\26\2\24\2\26\1\0\4\26\2\24\12\26\3\24"+
    "\2\0\1\24\17\0\1\26\1\24\1\26\36\24\33\26\2\0\131\24"+
    "\13\26\1\24\16\0\12\26\41\24\11\26\2\24\4\0\1\24\2\0"+
    "\1\26\30\24\4\26\1\24\11\26\1\24\3\26\1\24\5\26\22\0"+
    "\31\24\3\26\4\0\13\24\65\0\25\24\1\0\22\24\13\0\61\26"+
    "\66\24\3\26\1\24\22\26\1\24\7\26\12\24\2\26\2\0\12\26"+
    "\1\0\20\24\3\26\1\0\10\24\2\0\2\24\2\0\26\24\1\0"+
    "\7\24\1\0\1\24\3\0\4\24\2\0\1\26\1\24\7\26\2\0"+
    "\2\26\2\0\3\26\1\24\10\0\1\26\4\0\2\24\1\0\3\24"+
    "\2\26\2\0\12\26\4\24\7\0\2\24\1\0\1\26\2\0\3\26"+
    "\1\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24"+
    "\1\0\2\24\1\0\2\24\2\0\1\26\1\0\5\26\4\0\2\26"+
    "\2\0\3\26\3\0\1\26\7\0\4\24\1\0\1\24\7\0\14\26"+
    "\3\24\1\26\13\0\3\26\1\0\11\24\1\0\3\24\1\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\26\1\24\10\26"+
    "\1\0\3\26\1\0\3\26\2\0\1\24\17\0\2\24\2\26\2\0"+
    "\12\26\1\0\1\24\7\0\1\24\6\26\1\0\3\26\1\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24"+
    "\2\0\1\26\1\24\7\26\2\0\2\26\2\0\3\26\7\0\3\26"+
    "\4\0\2\24\1\0\3\24\2\26\2\0\12\26\1\0\1\24\20\0"+
    "\1\26\1\24\1\0\6\24\3\0\3\24\1\0\4\24\3\0\2\24"+
    "\1\0\1\24\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24"+
    "\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\24\6\0\1\26"+
    "\16\0\12\26\11\0\1\24\6\0\5\26\10\24\1\0\3\24\1\0"+
    "\27\24\1\0\20\24\3\0\1\24\7\26\1\0\3\26\1\0\4\26"+
    "\7\0\2\26\1\0\3\24\5\0\2\24\2\26\2\0\12\26\20\0"+
    "\1\24\3\26\1\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24"+
    "\1\0\5\24\2\0\1\26\1\24\7\26\1\0\3\26\1\0\4\26"+
    "\7\0\2\26\7\0\1\24\1\0\2\24\2\26\2\0\12\26\1\0"+
    "\2\24\15\0\4\26\11\24\1\0\3\24\1\0\51\24\2\26\1\24"+
    "\7\26\1\0\3\26\1\0\4\26\1\24\5\0\3\24\1\26\7\0"+
    "\3\24\2\26\2\0\12\26\12\0\6\24\1\0\3\26\1\0\22\24"+
    "\3\0\30\24\1\0\11\24\1\0\1\24\2\0\7\24\3\0\1\26"+
    "\4\0\6\26\1\0\1\26\1\0\10\26\6\0\12\26\2\0\2\26"+
    "\15\0\60\24\1\26\2\24\7\26\4\0\10\24\10\26\1\0\12\26"+
    "\47\0\2\24\1\0\1\24\1\0\5\24\1\0\30\24\1\0\1\24"+
    "\1\0\12\24\1\26\2\24\11\26\1\24\2\0\5\24\1\0\1\24"+
    "\1\0\6\26\2\0\12\26\2\0\4\24\40\0\1\24\27\0\2\26"+
    "\6\0\12\26\13\0\1\26\1\0\1\26\1\0\1\26\4\0\2\26"+
    "\10\24\1\0\44\24\4\0\24\26\1\0\2\26\5\24\13\26\1\0"+
    "\44\26\11\0\1\26\71\0\53\24\24\26\1\24\12\26\6\0\6\24"+
    "\4\26\4\24\3\26\1\24\3\26\2\24\7\26\3\24\4\26\15\24"+
    "\14\26\1\24\17\26\2\0\46\24\1\0\1\24\5\0\1\24\2\0"+
    "\53\24\1\0\u014d\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0"+
    "\4\24\2\0\51\24\1\0\4\24\2\0\41\24\1\0\4\24\2\0"+
    "\7\24\1\0\1\24\1\0\4\24\2\0\17\24\1\0\71\24\1\0"+
    "\4\24\2\0\103\24\2\0\3\26\40\0\20\24\20\0\126\24\2\0"+
    "\6\24\3\0\u026c\24\2\0\21\24\1\0\32\24\5\0\113\24\3\0"+
    "\13\24\7\0\15\24\1\0\4\24\3\26\13\0\22\24\3\26\13\0"+
    "\22\24\2\26\14\0\15\24\1\0\3\24\1\0\2\26\14\0\64\24"+
    "\40\26\3\0\1\24\3\0\2\24\1\26\2\0\12\26\41\0\4\26"+
    "\1\0\12\26\6\0\131\24\7\0\5\24\2\26\42\24\1\26\1\24"+
    "\5\0\106\24\12\0\37\24\1\0\14\26\4\0\14\26\12\0\12\26"+
    "\36\24\2\0\5\24\13\0\54\24\4\0\32\24\6\0\12\26\46\0"+
    "\27\24\5\26\4\0\65\24\12\26\1\0\35\26\2\0\13\26\6\0"+
    "\12\26\15\0\1\24\10\0\16\26\1\0\2\26\77\0\5\26\57\24"+
    "\21\26\7\24\4\0\12\26\21\0\11\26\14\0\3\26\36\24\15\26"+
    "\2\24\12\26\54\24\16\26\14\0\44\24\24\26\10\0\12\26\3\0"+
    "\3\24\12\26\44\24\2\0\11\24\7\0\53\24\2\0\3\24\20\0"+
    "\3\26\1\0\25\26\4\24\1\26\6\24\1\26\2\24\3\26\1\24"+
    "\5\0\300\24\72\26\1\0\5\26\u0116\24\2\0\6\24\2\0\46\24"+
    "\2\0\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\37\24\2\0\65\24\1\0\7\24\1\0\1\24\3\0\3\24"+
    "\1\0\7\24\3\0\4\24\2\0\6\24\4\0\15\24\5\0\3\24"+
    "\1\0\7\24\16\0\5\26\32\0\5\26\20\0\2\24\23\0\1\24"+
    "\13\0\5\26\1\0\12\26\1\0\1\24\15\0\1\24\20\0\15\24"+
    "\3\0\40\24\20\0\15\26\4\0\1\26\3\0\14\26\21\0\1\24"+
    "\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24\6\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\4\24\1\0\13\24\2\0\4\24"+
    "\5\0\5\24\4\0\1\24\21\0\51\24\u0a77\0\57\24\1\0\57\24"+
    "\1\0\205\24\6\0\4\24\3\26\2\24\14\0\46\24\1\0\1\24"+
    "\5\0\1\24\2\0\70\24\7\0\1\24\17\0\1\26\27\24\11\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\40\26\57\0\1\24\u01d5\0"+
    "\3\24\31\0\11\24\6\26\1\0\5\24\2\0\5\24\4\0\126\24"+
    "\2\0\2\26\2\0\3\24\1\0\132\24\1\0\4\24\5\0\53\24"+
    "\1\0\136\24\21\0\40\24\60\0\20\24\u0200\0\u19c0\24\100\0\u51fd\24"+
    "\3\0\u048d\24\103\0\56\24\2\0\u010d\24\3\0\20\24\12\26\2\24"+
    "\24\0\57\24\1\26\4\0\12\26\1\0\37\24\2\26\120\24\2\26"+
    "\45\0\11\24\2\0\147\24\2\0\65\24\2\0\11\24\52\0\15\24"+
    "\1\26\3\24\1\26\4\24\1\26\27\24\5\26\4\0\1\26\13\0"+
    "\1\24\7\0\64\24\14\0\2\26\62\24\22\26\12\0\12\26\6\0"+
    "\22\26\6\24\3\0\1\24\1\0\2\24\13\26\34\24\10\26\2\0"+
    "\27\24\15\26\14\0\35\24\3\0\4\26\57\24\16\26\16\0\1\24"+
    "\12\26\6\0\5\24\1\26\12\24\12\26\5\24\1\0\51\24\16\26"+
    "\11\0\3\24\1\26\10\24\2\26\2\0\12\26\6\0\27\24\3\0"+
    "\1\24\3\26\62\24\1\26\1\24\3\26\2\24\2\26\5\24\2\26"+
    "\1\24\1\26\1\24\30\0\3\24\2\0\13\24\5\26\2\0\3\24"+
    "\2\26\12\0\6\24\2\0\6\24\2\0\6\24\11\0\7\24\1\0"+
    "\7\24\1\0\53\24\1\0\16\24\6\0\163\24\10\26\1\0\2\26"+
    "\2\0\12\26\6\0\u2ba4\24\14\0\27\24\4\0\61\24\u2104\0\u016e\24"+
    "\2\0\152\24\46\0\7\24\14\0\5\24\5\0\1\24\1\26\12\24"+
    "\1\0\15\24\1\0\5\24\1\0\1\24\1\0\2\24\1\0\2\24"+
    "\1\0\154\24\41\0\u016b\24\22\0\100\24\2\0\66\24\50\0\15\24"+
    "\3\0\20\26\20\0\20\26\3\0\2\24\30\0\3\24\31\0\1\24"+
    "\6\0\5\24\1\0\207\24\2\0\1\26\4\0\1\24\13\0\12\26"+
    "\7\0\32\24\4\0\1\24\1\0\32\24\13\0\131\24\3\0\6\24"+
    "\2\0\6\24\2\0\6\24\2\0\3\24\3\0\2\24\3\0\2\24"+
    "\22\0\3\26\4\0\14\24\1\0\32\24\1\0\23\24\1\0\2\24"+
    "\1\0\17\24\2\0\16\24\42\0\173\24\105\0\65\24\210\0\1\26"+
    "\202\0\35\24\3\0\61\24\17\0\1\26\37\0\40\24\15\0\36\24"+
    "\5\0\46\24\5\26\5\0\36\24\2\0\44\24\4\0\10\24\1\0"+
    "\5\24\52\0\236\24\2\0\12\26\6\0\44\24\4\0\44\24\4\0"+
    "\50\24\10\0\64\24\234\0\u0137\24\11\0\26\24\12\0\10\24\230\0"+
    "\6\24\2\0\1\24\1\0\54\24\1\0\2\24\3\0\1\24\2\0"+
    "\27\24\12\0\27\24\11\0\37\24\101\0\23\24\1\0\2\24\12\0"+
    "\26\24\12\0\32\24\106\0\70\24\6\0\2\24\100\0\1\24\3\26"+
    "\1\0\2\26\5\0\4\26\4\24\1\0\3\24\1\0\35\24\2\0"+
    "\3\26\4\0\1\26\40\0\35\24\3\0\35\24\43\0\10\24\1\0"+
    "\34\24\2\26\31\0\66\24\12\0\26\24\12\0\23\24\15\0\22\24"+
    "\156\0\111\24\67\0\63\24\15\0\63\24\15\0\44\24\4\26\10\0"+
    "\12\26\u0146\0\52\24\1\0\2\26\3\0\2\24\116\0\35\24\12\0"+
    "\1\24\10\0\26\24\13\26\137\0\25\24\33\0\27\24\11\0\3\26"+
    "\65\24\17\26\37\0\12\26\17\0\4\26\55\24\13\26\2\0\1\26"+
    "\17\0\1\26\2\0\31\24\7\0\12\26\6\0\3\26\44\24\16\26"+
    "\1\0\12\26\4\0\1\24\2\26\1\24\10\0\43\24\1\26\2\0"+
    "\1\24\11\0\3\26\60\24\16\26\4\24\4\0\4\26\1\0\14\26"+
    "\1\24\1\0\1\24\43\0\22\24\1\0\31\24\14\26\6\0\1\26"+
    "\101\0\7\24\1\0\1\24\1\0\4\24\1\0\17\24\1\0\12\24"+
    "\7\0\57\24\14\26\5\0\12\26\6\0\4\26\1\0\10\24\2\0"+
    "\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24\1\0"+
    "\2\26\1\24\7\26\2\0\2\26\2\0\3\26\2\0\1\24\6\0"+
    "\1\26\5\0\5\24\2\26\2\0\7\26\3\0\5\26\213\0\65\24"+
    "\22\26\4\24\5\0\12\26\4\0\1\26\3\24\36\0\60\24\24\26"+
    "\2\24\1\0\1\24\10\0\12\26\246\0\57\24\7\26\2\0\11\26"+
    "\27\0\4\24\2\26\42\0\60\24\21\26\3\0\1\24\13\0\12\26"+
    "\46\0\53\24\15\26\1\24\7\0\12\26\66\0\33\24\2\0\17\26"+
    "\4\0\12\26\306\0\54\24\17\26\145\0\100\24\12\26\25\0\10\24"+
    "\2\0\1\24\2\0\10\24\1\0\2\24\1\0\30\24\6\26\1\0"+
    "\2\26\2\0\4\26\1\24\1\26\1\24\2\26\14\0\12\26\106\0"+
    "\10\24\2\0\47\24\7\26\2\0\7\26\1\24\1\0\1\24\1\26"+
    "\33\0\1\24\12\26\50\24\7\26\1\24\4\26\10\0\1\26\10\0"+
    "\1\24\13\26\56\24\20\26\3\0\1\24\42\0\71\24\u0107\0\11\24"+
    "\1\0\45\24\10\26\1\0\10\26\1\24\17\0\12\26\30\0\36\24"+
    "\2\0\26\26\1\0\16\26\111\0\7\24\1\0\2\24\1\0\46\24"+
    "\6\26\3\0\1\26\1\0\2\26\1\0\7\26\1\24\1\26\10\0"+
    "\12\26\6\0\6\24\1\0\2\24\1\0\40\24\5\26\1\0\2\26"+
    "\1\0\5\26\1\24\7\0\12\26\u0136\0\23\24\4\26\271\0\1\24"+
    "\54\0\4\24\37\0\u039a\24\146\0\157\24\21\0\304\24\u0abc\0\u042f\24"+
    "\1\0\11\26\u0fc7\0\u0247\24\u21b9\0\u0239\24\7\0\37\24\1\0\12\26"+
    "\146\0\36\24\2\0\5\26\13\0\60\24\7\26\11\0\4\24\14\0"+
    "\12\26\11\0\25\24\5\0\23\24\u02b0\0\100\24\200\0\113\24\4\0"+
    "\1\26\1\24\67\26\7\0\4\26\15\24\100\0\2\24\1\0\1\24"+
    "\1\26\13\0\2\26\16\0\u17f8\24\10\0\u04d6\24\52\0\11\24\u22f7\0"+
    "\u011f\24\61\0\3\24\21\0\4\24\10\0\u018c\24\u0904\0\153\24\5\0"+
    "\15\24\3\0\11\24\7\0\12\24\3\0\2\26\1\0\4\26\u14c1\0"+
    "\5\26\3\0\26\26\2\0\7\26\36\0\4\26\224\0\3\26\u01bb\0"+
    "\125\24\1\0\107\24\1\0\2\24\2\0\1\24\2\0\2\24\2\0"+
    "\4\24\1\0\14\24\1\0\1\24\1\0\7\24\1\0\101\24\1\0"+
    "\4\24\2\0\10\24\1\0\7\24\1\0\34\24\1\0\4\24\1\0"+
    "\5\24\1\0\1\24\3\0\7\24\1\0\u0154\24\2\0\31\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\37\24\1\0\31\24\1\0"+
    "\37\24\1\0\31\24\1\0\37\24\1\0\31\24\1\0\10\24\2\0"+
    "\62\26\u0200\0\67\26\4\0\62\26\10\0\1\26\16\0\1\26\26\0"+
    "\5\26\1\0\17\26\u0550\0\7\26\1\0\21\26\2\0\7\26\1\0"+
    "\2\26\1\0\5\26\325\0\55\24\3\0\7\26\7\24\2\0\12\26"+
    "\4\0\1\24\u0171\0\54\24\16\26\5\0\1\24\u0500\0\305\24\13\0"+
    "\7\26\51\0\104\24\7\26\1\24\4\0\12\26\u0356\0\1\24\u014f\0"+
    "\4\24\1\0\33\24\1\0\2\24\1\0\1\24\2\0\1\24\1\0"+
    "\12\24\1\0\4\24\1\0\1\24\1\0\1\24\6\0\1\24\4\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\3\24\1\0\2\24\1\0"+
    "\1\24\2\0\1\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\2\0\4\24\1\0\7\24\1\0"+
    "\4\24\1\0\4\24\1\0\1\24\1\0\12\24\1\0\21\24\5\0"+
    "\3\24\1\0\5\24\1\0\21\24\u0d34\0\12\26\u0406\0\ua6de\24\42\0"+
    "\u1035\24\13\0\336\24\2\0\u1682\24\16\0\u1d31\24\u0c1f\0\u021e\24\u05e2\0"+
    "\u134b\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\26\36\0\140\26\200\0\360\26\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\2\6"+
    "\3\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\1\1\22\1\23\10\7"+
    "\2\0\1\24\1\25\2\7\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\3\7\1\35\7\7\2\0\4\7"+
    "\1\36\7\7\3\0\1\37\5\7\1\40\1\7\1\41"+
    "\2\7\3\0\4\7\1\42\1\43\2\7\1\0\1\44"+
    "\1\0\2\7\1\45\3\7\1\44\1\0\1\46\4\7"+
    "\3\0\2\7\3\0\2\7\3\0\2\7\25\0\1\47"+
    "\1\50\11\0\1\51\1\52\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\71\0\71\0\344"+
    "\0\u011d\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\71"+
    "\0\71\0\u02ac\0\u02e5\0\u031e\0\71\0\71\0\71\0\71"+
    "\0\u0357\0\u0390\0\71\0\71\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\71\0\u0603"+
    "\0\u063c\0\u0675\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u06ae\0\u06e7\0\u0720\0\u01c8\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u01c8\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u01c8\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u01c8\0\u0d95\0\u01c8\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u01c8"+
    "\0\u01c8\0\u0fcf\0\u1008\0\u1041\0\u0bcd\0\u107a\0\u10b3\0\u10ec"+
    "\0\u01c8\0\u1125\0\u115e\0\u1197\0\71\0\u11d0\0\u01c8\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\71"+
    "\0\71\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\71\0\71\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\u1f9e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\2\1\13\3\14\1\15\5\14\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\7\14\1\41\1\14\1\42\1\43"+
    "\1\14\1\44\2\14\73\0\1\4\72\0\1\45\67\0"+
    "\1\46\3\0\1\47\14\46\1\0\1\46\5\0\1\46"+
    "\12\0\23\46\11\0\2\11\1\50\70\0\1\50\66\0"+
    "\2\14\1\0\1\14\1\51\11\14\17\0\23\14\11\0"+
    "\2\14\1\0\13\14\17\0\23\14\11\0\2\14\1\0"+
    "\5\14\1\52\5\14\17\0\23\14\30\0\1\53\70\0"+
    "\1\54\70\0\1\55\70\0\1\56\70\0\1\57\102\0"+
    "\1\60\71\0\1\61\36\0\2\14\1\0\13\14\17\0"+
    "\1\14\1\62\16\14\1\63\2\14\11\0\2\14\1\0"+
    "\13\14\17\0\11\14\1\64\1\14\1\65\7\14\11\0"+
    "\2\14\1\0\13\14\17\0\7\14\1\66\13\14\11\0"+
    "\2\14\1\0\13\14\17\0\10\14\1\67\12\14\11\0"+
    "\2\14\1\0\13\14\17\0\4\14\1\70\16\14\11\0"+
    "\2\14\1\0\13\14\17\0\14\14\1\71\6\14\11\0"+
    "\2\14\1\0\13\14\17\0\17\14\1\72\3\14\11\0"+
    "\2\14\1\0\13\14\17\0\4\14\1\73\4\14\1\74"+
    "\11\14\5\0\1\75\66\0\1\76\3\0\1\47\14\76"+
    "\1\0\1\76\5\0\1\76\12\0\23\76\11\0\2\50"+
    "\67\0\2\14\1\0\2\14\1\77\10\14\17\0\23\14"+
    "\11\0\2\14\1\0\6\14\1\100\4\14\17\0\23\14"+
    "\11\0\2\14\1\0\13\14\17\0\2\14\1\101\20\14"+
    "\11\0\2\14\1\0\13\14\17\0\21\14\1\102\1\14"+
    "\11\0\2\14\1\0\13\14\17\0\7\14\1\103\13\14"+
    "\11\0\2\14\1\0\13\14\17\0\10\14\1\104\12\14"+
    "\11\0\2\14\1\0\13\14\17\0\14\14\1\105\6\14"+
    "\11\0\2\14\1\0\13\14\17\0\14\14\1\106\6\14"+
    "\11\0\2\14\1\0\13\14\17\0\14\14\1\107\6\14"+
    "\11\0\2\14\1\0\13\14\17\0\1\14\1\110\21\14"+
    "\11\0\2\14\1\0\13\14\17\0\2\14\1\111\20\14"+
    "\11\0\2\14\1\0\13\14\17\0\1\112\22\14\5\113"+
    "\1\114\1\0\62\113\3\0\1\115\3\0\1\47\14\115"+
    "\1\0\1\115\5\0\1\115\12\0\23\115\11\0\2\14"+
    "\1\0\3\14\1\116\7\14\17\0\23\14\11\0\2\14"+
    "\1\0\7\14\1\77\3\14\17\0\23\14\11\0\2\14"+
    "\1\0\13\14\17\0\3\14\1\117\17\14\11\0\2\14"+
    "\1\0\13\14\17\0\4\14\1\120\16\14\11\0\2\14"+
    "\1\0\13\14\17\0\1\14\1\121\21\14\11\0\2\14"+
    "\1\0\13\14\17\0\12\14\1\122\10\14\11\0\2\14"+
    "\1\0\13\14\17\0\5\14\1\123\15\14\11\0\2\14"+
    "\1\0\13\14\17\0\4\14\1\124\16\14\11\0\2\14"+
    "\1\0\13\14\17\0\4\14\1\125\16\14\11\0\2\14"+
    "\1\0\13\14\17\0\20\14\1\126\2\14\11\0\2\14"+
    "\1\0\13\14\17\0\1\127\2\14\1\130\17\14\5\113"+
    "\1\131\67\113\1\132\1\131\63\113\3\0\1\133\3\0"+
    "\1\47\14\133\1\0\1\133\5\0\1\133\12\0\23\133"+
    "\11\0\2\14\1\0\13\14\17\0\4\14\1\134\16\14"+
    "\11\0\2\14\1\0\13\14\17\0\5\14\1\135\15\14"+
    "\11\0\2\14\1\0\13\14\17\0\11\14\1\136\11\14"+
    "\11\0\2\14\1\0\13\14\17\0\10\14\1\137\12\14"+
    "\11\0\2\14\1\0\13\14\17\0\7\14\1\140\13\14"+
    "\11\0\2\14\1\0\13\14\17\0\20\14\1\141\2\14"+
    "\11\0\2\14\1\0\13\14\17\0\20\14\1\142\2\14"+
    "\11\0\2\14\1\0\13\14\17\0\10\14\1\143\12\14"+
    "\4\113\1\144\1\131\67\113\1\145\1\131\63\113\3\0"+
    "\1\146\3\0\1\47\14\146\1\0\1\146\5\0\1\146"+
    "\12\0\23\146\11\0\2\14\1\0\13\14\17\0\5\14"+
    "\1\147\15\14\11\0\2\14\1\0\13\14\17\0\10\14"+
    "\1\150\12\14\11\0\2\14\1\0\13\14\17\0\12\14"+
    "\1\151\10\14\11\0\2\14\1\0\13\14\17\0\5\14"+
    "\1\152\15\14\11\0\2\14\1\0\13\14\17\0\21\14"+
    "\1\153\1\14\11\0\2\14\1\0\13\14\17\0\14\14"+
    "\1\154\6\14\4\113\1\155\1\131\63\113\3\0\1\156"+
    "\3\0\1\47\14\156\1\0\1\156\5\0\1\156\12\0"+
    "\23\156\11\0\2\14\1\0\13\14\17\0\6\14\1\157"+
    "\14\14\11\0\2\14\1\0\13\14\17\0\20\14\1\160"+
    "\2\14\11\0\2\14\1\0\13\14\17\0\22\14\1\161"+
    "\11\0\2\14\1\0\13\14\17\0\4\14\1\162\16\14"+
    "\11\0\2\14\1\0\13\14\17\0\12\14\1\163\10\14"+
    "\3\0\1\164\3\0\1\47\14\164\1\0\1\164\5\0"+
    "\1\164\12\0\23\164\11\0\2\14\1\165\13\14\17\0"+
    "\23\14\11\0\2\14\1\166\13\14\17\0\23\14\11\0"+
    "\2\14\1\0\13\14\17\0\5\14\1\167\15\14\11\0"+
    "\2\14\1\0\13\14\17\0\10\14\1\170\12\14\3\0"+
    "\1\171\3\0\1\47\14\171\1\0\1\171\5\0\1\171"+
    "\12\0\23\171\50\0\1\172\70\0\1\173\31\0\2\14"+
    "\1\0\13\14\17\0\10\14\1\174\12\14\11\0\2\14"+
    "\1\0\13\14\17\0\5\14\1\175\15\14\3\0\1\176"+
    "\3\0\1\47\14\176\1\0\1\176\5\0\1\176\12\0"+
    "\23\176\66\0\1\177\70\0\1\200\13\0\2\14\1\0"+
    "\13\14\17\0\20\14\1\201\2\14\11\0\2\14\1\0"+
    "\13\14\17\0\22\14\1\202\3\0\1\203\3\0\1\47"+
    "\14\203\1\0\1\203\5\0\1\203\12\0\23\203\67\0"+
    "\1\204\70\0\1\205\12\0\2\14\1\206\13\14\17\0"+
    "\23\14\11\0\2\14\1\207\13\14\17\0\23\14\3\0"+
    "\1\210\3\0\1\47\14\210\1\0\1\210\5\0\1\210"+
    "\12\0\23\210\55\0\1\211\70\0\1\212\63\0\1\213"+
    "\70\0\1\214\23\0\1\215\3\0\1\47\14\215\1\0"+
    "\1\215\5\0\1\215\12\0\23\215\47\0\1\216\70\0"+
    "\1\217\107\0\1\220\70\0\1\221\5\0\1\222\3\0"+
    "\1\47\14\222\1\0\1\222\5\0\1\222\12\0\23\222"+
    "\62\0\1\223\70\0\1\224\75\0\1\225\70\0\1\226"+
    "\4\0\1\227\3\0\1\47\14\227\1\0\1\227\5\0"+
    "\1\227\12\0\23\227\57\0\1\230\70\0\1\231\66\0"+
    "\1\232\70\0\1\233\16\0\1\234\3\0\1\47\14\234"+
    "\1\0\1\234\5\0\1\234\12\0\23\234\47\0\1\235"+
    "\70\0\1\236\24\0\1\237\3\0\1\47\14\237\1\0"+
    "\1\237\5\0\1\237\12\0\23\237\62\0\1\240\70\0"+
    "\1\241\11\0\1\242\3\0\1\47\14\242\1\0\1\242"+
    "\5\0\1\242\12\0\23\242\57\0\1\243\70\0\1\244"+
    "\14\0\1\245\3\0\1\47\14\245\1\0\1\245\5\0"+
    "\1\245\12\0\23\245\3\0\1\246\3\0\1\47\14\246"+
    "\1\0\1\246\5\0\1\246\12\0\23\246\3\0\1\247"+
    "\3\0\1\47\14\247\1\0\1\247\5\0\1\247\12\0"+
    "\23\247\3\0\1\250\3\0\1\47\14\250\1\0\1\250"+
    "\5\0\1\250\12\0\23\250\3\0\1\251\3\0\1\47"+
    "\14\251\1\0\1\251\5\0\1\251\12\0\23\251\3\0"+
    "\1\252\3\0\1\47\14\252\1\0\1\252\5\0\1\252"+
    "\12\0\23\252\3\0\1\253\3\0\1\47\14\253\1\0"+
    "\1\253\5\0\1\253\12\0\23\253\3\0\1\254\3\0"+
    "\1\47\14\254\1\0\1\254\5\0\1\254\12\0\23\254"+
    "\3\0\1\255\3\0\1\47\14\255\1\0\1\255\5\0"+
    "\1\255\12\0\23\255\3\0\1\256\3\0\1\47\14\256"+
    "\1\0\1\256\5\0\1\256\12\0\23\256\3\0\1\257"+
    "\3\0\1\47\14\257\1\0\1\257\5\0\1\257\12\0"+
    "\23\257\3\0\1\260\3\0\1\47\14\260\1\0\1\260"+
    "\5\0\1\260\12\0\23\260\3\0\1\261\3\0\1\47"+
    "\14\261\1\0\1\261\5\0\1\261\12\0\23\261\7\0"+
    "\1\47\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8151];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\10\1\2\11"+
    "\3\1\4\11\2\1\2\11\10\1\2\0\1\11\3\1"+
    "\7\11\13\1\2\0\14\1\3\0\13\1\3\0\10\1"+
    "\1\0\1\1\1\0\6\1\1\11\1\0\5\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\25\0\2\11\11\0"+
    "\2\11\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  BufferedWriter  bw;
  File file;
  ArrayList<String> simbolos;
  public String s;
  public String Error;

  public void writeTable(String str) throws IOException{
    if (!simbolos.contains(str.split(",")[0])) {
      bw.write(str);
      bw.newLine();
      bw.flush();
      simbolos.add(str.split(",")[0]);
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    try {
    file = new File("../ts.txt");
    bw = new BufferedWriter(new FileWriter(file, true));
    simbolos = new ArrayList<>();
    s = "";
  	Error = "";
  } catch (IOException e) {
    e.printStackTrace();
  }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3720) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Error = String.format("Caracter no permitido: <" + yytext() + "> en la linea " + yyline); throw new Error(Error);
            } 
            // fall through
          case 43: break;
          case 2: 
            { /* Así ignora los espacios en blanco */
            } 
            // fall through
          case 44: break;
          case 3: 
            { s += String.format("\n>>> Simbolo Resta: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.RESTA, yychar, yyline);
            } 
            // fall through
          case 45: break;
          case 4: 
            { s += String.format("\n>>> Simbolo Division: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.DIVISION, yychar, yyline);
            } 
            // fall through
          case 46: break;
          case 5: 
            { s += String.format("\n>>> Simbolo Multiplicacion: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.MULTIPLICAION, yychar, yyline);
            } 
            // fall through
          case 47: break;
          case 6: 
            { if ((Integer.valueOf(yytext()) > -32768) && (Integer.valueOf(yytext()) < 32768)) {
                                    s += String.format("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                    writeTable("_"+yytext()+",CTE_INT,,"+yytext()+",");
                                    return new Symbol(sym.CONST_INTEGER, yychar, yyline, new String(yytext()));
                                  } else {
                                    String exception_message = String.format(" ERROR - Integer excede los 16 bits: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                    throw new Error(exception_message);
                                  }
            } 
            // fall through
          case 48: break;
          case 7: 
            { s += String.format("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  return new Symbol(sym.ID, yychar, yyline, new String(yytext()));
            } 
            // fall through
          case 49: break;
          case 8: 
            { s += String.format("\n>>> Simbolo Dos Puntos encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DOS_PUNTOS, yychar, yyline);
            } 
            // fall through
          case 50: break;
          case 9: 
            { s += String.format("\n>>> Simbolo Punto y Coma encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PUNTO_Y_COMA, yychar, yyline);
            } 
            // fall through
          case 51: break;
          case 10: 
            { s += String.format("\n>>> Simbolo coma encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.COMA, yychar, yyline);
            } 
            // fall through
          case 52: break;
          case 11: 
            { s += String.format("\n>>> Simbolo NOT encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.NOT, yychar, yyline);
            } 
            // fall through
          case 53: break;
          case 12: 
            { s += String.format("\n>>> Simbolo Mayor encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MAYOR, yychar, yyline);
            } 
            // fall through
          case 54: break;
          case 13: 
            { s += String.format("\n>>> Simbolo Menor encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MENOR, yychar, yyline);
            } 
            // fall through
          case 55: break;
          case 14: 
            { s += String.format("\n>>> Simbolo Parentesis Abre encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PARENTESIS_ABRE, yychar, yyline);
            } 
            // fall through
          case 56: break;
          case 15: 
            { s += String.format("\n>>> Simbolo Parentesis Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PARENTESIS_CIERRA, yychar, yyline);
            } 
            // fall through
          case 57: break;
          case 16: 
            { s += String.format("\n>>> Simbolo Llaves Abre encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.LLAVES_ABRE, yychar, yyline);
            } 
            // fall through
          case 58: break;
          case 17: 
            { s += String.format("\n>>> Simbolo Llaves Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.LLAVES_CIERRA, yychar, yyline);
            } 
            // fall through
          case 59: break;
          case 18: 
            { s += String.format("\n>>> Simbolo Suma: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.SUMA, yychar, yyline);
            } 
            // fall through
          case 60: break;
          case 19: 
            { s += String.format("\n>>> Simbolo Signo pregunta de IF Unario: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.SIGNO_PREGUNTA, yychar, yyline);
            } 
            // fall through
          case 61: break;
          case 20: 
            { s += String.format("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_STR,,"+yytext()+","+yytext().length());
                                  return new Symbol(sym.CONST_STRING, yychar, yyline, new String(yytext()));
            } 
            // fall through
          case 62: break;
          case 21: 
            { /* real de 32 bits : 16 parte entera y 16 parte decimal*/
									                int indexDecimal = yytext().indexOf(".");
								                  String entero = yytext().substring(0, indexDecimal);
								                  String decimal = yytext().substring(indexDecimal+1,yytext().length());

                								  if ( (Integer.valueOf(entero) > -32768) && (Integer.valueOf(entero) < 32768)
                								       && (Integer.valueOf(decimal) > -32768) && (Integer.valueOf(decimal) < 32768) ) {
                                          s += String.format("\n>>> Float encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                          writeTable("_"+yytext()+",CTE_FLOAT,,"+yytext()+",");
                                          return new Symbol(sym.CONST_FLOAT, yychar, yyline, new String(yytext()));
                                  } else {
                                    String exception_message = String.format(" ERROR - Float excede los 32 bits: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                    throw new Error(exception_message);
                                  }
            } 
            // fall through
          case 63: break;
          case 22: 
            { s += String.format("\n>>> Simbolo Asignacion encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ASIGNACION, yychar, yyline);
            } 
            // fall through
          case 64: break;
          case 23: 
            { s += String.format("\n>>> Simbolo Igual encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.IGUAL, yychar, yyline);
            } 
            // fall through
          case 65: break;
          case 24: 
            { s += String.format("\n>>> Simbolo Distinto encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DISTINTO, yychar, yyline);
            } 
            // fall through
          case 66: break;
          case 25: 
            { s += String.format("\n>>> Simbolo MenorIgual  encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MENOR_IGUAL, yychar, yyline);
            } 
            // fall through
          case 67: break;
          case 26: 
            { s += String.format("\n>>> Simbolo MayorIgual encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MAYOR_IGUAL, yychar, yyline);
            } 
            // fall through
          case 68: break;
          case 27: 
            { s += String.format("\n>>> Simbolo AND: [%s] encontrado en linea %d, columna %d\n",yytext(), yyline, yycolumn); return new Symbol(sym.AND, yychar, yyline);
            } 
            // fall through
          case 69: break;
          case 28: 
            { s += String.format("\n>>> Simbolo OR: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn); return new Symbol(sym.OR, yychar, yyline);
            } 
            // fall through
          case 70: break;
          case 29: 
            { s += String.format("\n>>> if en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.IF, yychar, yyline);
            } 
            // fall through
          case 71: break;
          case 30: 
            { s += String.format("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_INTEGER, yychar, yyline);
            } 
            // fall through
          case 72: break;
          case 31: 
            { s += String.format("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_BOOL,,"+yytext()+",");
                                  return new Symbol(sym.CONST_BOOL, yychar, yyline, new String(yytext()));
            } 
            // fall through
          case 73: break;
          case 32: 
            { s += String.format("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_BOOL, yychar, yyline);
            } 
            // fall through
          case 74: break;
          case 33: 
            { s += String.format("\n>>> else en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ELSE, yychar, yyline);
            } 
            // fall through
          case 75: break;
          case 34: 
            { s += String.format("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_FLOAT, yychar, yyline);
            } 
            // fall through
          case 76: break;
          case 35: 
            { s += String.format("\n>>> while en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.WHILE, yychar, yyline);
            } 
            // fall through
          case 77: break;
          case 36: 
            { /* Así ignora los comentarios */
            } 
            // fall through
          case 78: break;
          case 37: 
            { s += String.format("\n>>> Funcion consta en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_STRING, yychar, yyline);
            } 
            // fall through
          case 79: break;
          case 38: 
            { s += String.format("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DISPLAY_FUNCTION, yychar, yyline);
            } 
            // fall through
          case 80: break;
          case 39: 
            { s += String.format("\n>>> DECLARE en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DECLARE_SECTION, yychar, yyline);
            } 
            // fall through
          case 81: break;
          case 40: 
            { s += String.format("\n>>> PROGRAM en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PROGRAM_SECTION, yychar, yyline);
            } 
            // fall through
          case 82: break;
          case 41: 
            { s += String.format("\n>>> ENDDECLARE en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ENDDECLARE_SECTION, yychar, yyline);
            } 
            // fall through
          case 83: break;
          case 42: 
            { s += String.format("\n>>> ENDPROGRAM en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ENDPROGRAM_SECTION, yychar, yyline);
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
